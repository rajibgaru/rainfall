generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
enum Role {
  USER
  AGENT
  ADMIN
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String    @unique
  password          String?
  phone             String?
  avatar            String?
  role              Role      @default(USER)
  emailVerified     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Agent/Brokerage specific fields
  companyName       String?
  licenseNumber     String?
  licenseState      String?
  licenseExpiry     DateTime?
  businessAddress   String?
  businessPhone     String?
  website           String?
  bio               String?
  specialties       String[]  @default([])
  isVerified        Boolean   @default(false)
  verificationDoc   String?   // URL to uploaded license document
  
  // Existing relations
  accounts          Account[]
  sessions          Session[]
  bids              Bid[]
  auctions          Auction[] @relation("SellerAuctions")
  watchlist         Watchlist[]
  notifications     Notification[]
  
  // NEW: Escrow relations
  escrowWallet      EscrowWallet?
  
  // NEW: Plaid relations
  bankAccounts      UserBankAccount[]
  depositRequests   DepositRequest[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Auction {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String        @db.String
  images           String[]
  startingBid      Float
  reservePrice     Float         @default(0)
  currentBid       Float
  incrementAmount  Float         @default(100)
  location         String
  category         String
  featured         Boolean       @default(false)
  status           AuctionStatus @default(UPCOMING)
  startDate        DateTime
  endDate          DateTime
  propertyDetails  Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  sellerId         String        @db.ObjectId
  seller           User          @relation("SellerAuctions", fields: [sellerId], references: [id])
  bids             Bid[]
  watchlist        Watchlist[]
  
  // NEW: Escrow relations
  bidRequirement   BidRequirement?
  escrowTransactions EscrowTransaction[]
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  createdAt DateTime @default(now())
  auctionId String   @db.ObjectId
  auction   Auction  @relation(fields: [auctionId], references: [id])
  bidderId  String   @db.ObjectId
  bidder    User     @relation(fields: [bidderId], references: [id])
  
  // NEW: Escrow relation
  escrowTransactions EscrowTransaction[]
}

model Watchlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  auctionId String   @db.ObjectId
  auction   Auction  @relation(fields: [auctionId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  read      Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

// NEW: ESCROW SYSTEM MODELS

model EscrowWallet {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  userId        String              @db.ObjectId @unique
  balance       Float               @default(0)
  frozenAmount  Float               @default(0) // Amount locked for active bids
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  EscrowTransaction[]
  
  @@map("escrow_wallets")
}

model EscrowTransaction {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  walletId      String            @db.ObjectId
  type          TransactionType
  amount        Float
  status        TransactionStatus @default(PENDING)
  reference     String?           // Wire transfer ref, check number, etc.
  description   String
  processedBy   String?           @db.ObjectId // Admin who processed
  createdAt     DateTime          @default(now())
  processedAt   DateTime?
  
  // For bid-related transactions
  auctionId     String?           @db.ObjectId
  bidId         String?           @db.ObjectId
  
  // Relations
  wallet        EscrowWallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)
  auction       Auction?          @relation(fields: [auctionId], references: [id])
  bid           Bid?              @relation(fields: [bidId], references: [id])
  
  @@map("escrow_transactions")
}

model BidRequirement {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  auctionId     String    @db.ObjectId @unique
  requiredAmount Float    @default(5000) // Minimum escrow needed to bid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  auction       Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@map("bid_requirements")
}

// NEW: PLAID INTEGRATION MODELS

model UserBankAccount {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @db.ObjectId
  plaidAccessToken  String    // TODO: Encrypt in production
  plaidItemId       String
  accountId         String    // Plaid's account ID
  accountName       String
  accountType       String    // checking, savings, etc.
  accountSubtype    String?
  mask              String    // Last 4 digits
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  depositRequests   DepositRequest[]
  
  @@map("user_bank_accounts")
}

model DepositRequest {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  bankAccountId   String?           @db.ObjectId // For ACH transfers
  amount          Float
  method          DepositMethod     @default(MANUAL)
  status          DepositStatus     @default(PENDING)
  reference       String            @unique
  plaidTransferId String?           // For ACH transfers via Plaid
  instructions    Json?             // Deposit instructions for manual methods
  errorMessage    String?           // Error details if failed
  createdAt       DateTime          @default(now())
  processedAt     DateTime?
  
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount     UserBankAccount?  @relation(fields: [bankAccountId], references: [id])
  
  @@map("deposit_requests")
}

// ENUMS

enum AuctionStatus {
  UPCOMING
  LIVE
  ENDED
  CANCELLED
}

enum TransactionType {
  DEPOSIT       // Money coming in
  WITHDRAWAL    // Money going out
  BID_FREEZE    // Freeze for active bid (future use)
  BID_UNFREEZE  // Release frozen amount (future use)
  PURCHASE      // Applied to winning purchase
  REFUND        // Admin refund
  ADJUSTMENT    // Admin balance adjustment
}

enum TransactionStatus {
  PENDING       // Awaiting processing
  COMPLETED     // Successfully processed  
  FAILED        // Transaction failed
  CANCELLED     // Transaction cancelled
}

enum DepositMethod {
  MANUAL        // Wire/Check/Zelle (manual processing)
  ACH           // ACH via Plaid
  PLAID_TRANSFER // Direct Plaid transfer
}

enum DepositStatus {
  PENDING       // Awaiting processing
  PROCESSING    // In progress (ACH processing)
  COMPLETED     // Successfully processed
  FAILED        // Failed to process
  CANCELLED     // Cancelled by user or admin
}